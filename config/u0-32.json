{
  "segment_widths": [1, 4],
  "split_whitespace": true,
  "tag_create": {"regex_string": "^:(.*)$"},
  "tag_use_rules": [
    {
      "regex_string": "^\\.(.*)$",
      "feedbacks": [
        {
          "add_segment": 1,
          "relative": false,
          "pos_segment": 0,
          "pos_offset": 0
        }
      ]
    }, {
      "regex_string": "^\\$(.*)$",
      "feedbacks": [
        {
          "add_segment": 1,
          "relative": false,
          "pos_segment": 1,
          "pos_offset": 0
        }
      ]
    }
  ], "rules": [
    {
      "regex_string": "^fill:0b([0-9]+),0b([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:0b([0-9]+),0h([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:0b([0-9]+),([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:0h([0-9]+),0b([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:0h([0-9]+),0h([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:0h([0-9]+),([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:([0-9]+),0b([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:([0-9]+),0h([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^fill:([0-9]+),([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }, {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1,
              "fill": true
            }
          ]
        }
      ]
    }, {
      "regex_string": "^rread([0-3])$",
      "segment_values": [[0],[]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {}
          ]
        }
      ]
    }, {
      "regex_string": "^add([0-3])$",
      "segment_values": [[4],[]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {}
          ]
        }
      ]
    }, {
      "regex_string": "^\\+=1$",
      "segment_values": [[8],[]],
      "captures": []
    }, {
      "regex_string": "^-=1$",
      "segment_values": [[9],[]],
      "captures": []
    }, {
      "regex_string": "^\\+=0b([0-1]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^\\+=0x([0-9A-F]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^\\+=([0-9]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^-=0b([0-1]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "negate": true,
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^-=0x([0-9A-F]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "negate": true,
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^-=([0-9]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "negate": true,
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^\\+\\+$",
      "segment_values": [[8],[]],
      "captures": []
    }, {
      "regex_string": "^--$",
      "segment_values": [[9],[]],
      "captures": []
    }, {
      "regex_string": "^-0b([0-1]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "negate": true,
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^-0x([0-9A-F]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "negate": true,
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^-([0-9]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "negate": true,
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^0b([0-1]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "base": 2,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^0x([0-9A-F]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "base": 16,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }
      ]
    }, {
      "regex_string": "^([0-9]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "base": 10,
          "feedbacks": [
            {
              "segment": 1
            }
          ]
        }
      ]
    }
  ]
}
