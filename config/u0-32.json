{
  "segment_widths": [1, 4],
  "split_whitespace": true,
  "tag_create": {"regex_string": "^:(.*)$"},
  "rules": [
    {
      "regex_string": "^\\.(.*)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^\\$(.*)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 1,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:0b([0-9]+),0b([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:0b([0-9]+),0h([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:0b([0-9]+),([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:0h([0-9]+),0b([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:0h([0-9]+),0h([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:0h([0-9]+),([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:([0-9]+),0b([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:([0-9]+),0h([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^fill:([0-9]+),([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }, {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1,
                "fill": true
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^rread([0-3])$",
      "segment_values": [[0],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^add([0-3])$",
      "segment_values": [[4],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^\\+=1$",
      "segment_values": [[8],[]],
      "captures": []
    }, {
      "regex_string": "^-=1$",
      "segment_values": [[9],[]],
      "captures": []
    }, {
      "regex_string": "^\\+=0b([0-1]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^\\+=0x([0-9A-F]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^\\+=([0-9]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^-=0b([0-1]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^-=0x([0-9A-F]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^-=([0-9]+)$",
      "segment_values": [[4],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^\\+\\+$",
      "segment_values": [[8],[]],
      "captures": []
    }, {
      "regex_string": "^--$",
      "segment_values": [[9],[]],
      "captures": []
    }, {
      "regex_string": "^carry$",
      "segment_values": [[10],[]],
      "captures": []
    }, {
      "regex_string": "^borrow$",
      "segment_values": [[11],[]],
      "captures": []
    }, {
      "regex_string": "^~$",
      "segment_values": [[12],[]],
      "captures": []
    }, {
      "regex_string": "^break$",
      "segment_values": [[13],[]],
      "captures": []
    }, {
      "regex_string": "^reads$",
      "segment_values": [[14],[]],
      "captures": []
    }, {
      "regex_string": "^return$",
      "segment_values": [[15],[]],
      "captures": []
    }, {
      "regex_string": "^continue$",
      "segment_values": [[16],[]],
      "captures": []
    }, {
      "regex_string": "^ien$",
      "segment_values": [[17],[]],
      "captures": []
    }, {
      "regex_string": "^recv$",
      "segment_values": [[18],[]],
      "captures": []
    }, {
      "regex_string": "^ld0i$",
      "segment_values": [[19],[]],
      "captures": []
    }, {
      "regex_string": "^kill$",
      "segment_values": [[20],[]],
      "captures": []
    }, {
      "regex_string": "^wait$",
      "segment_values": [[21],[]],
      "captures": []
    }, {
      "regex_string": "^getbp$",
      "segment_values": [[22],[]],
      "captures": []
    }, {
      "regex_string": "^getba$",
      "segment_values": [[23],[]],
      "captures": []
    }, {
      "regex_string": "^calli$",
      "segment_values": [[24],[]],
      "captures": []
    }, {
      "regex_string": "^calli:(.*)$",
      "segment_values": [[24],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^enteri:(.*)$",
      "segment_values": [[24],[0, 0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }, {
                "from_segment": 1,
                "add_segment": 1,
                "add_index": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jumpi$",
      "segment_values": [[25],[]],
      "captures": []
    }, {
      "regex_string": "^jumpi:(.*)$",
      "segment_values": [[25],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jenteri:(.*)$",
      "segment_values": [[25],[0, 0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }, {
                "from_segment": 1,
                "add_segment": 1,
                "add_index": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jc$",
      "segment_values": [[26],[]],
      "captures": []
    }, {
      "regex_string": "^jc:(.*)$",
      "segment_values": [[26],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jnc$",
      "segment_values": [[27],[]],
      "captures": []
    }, {
      "regex_string": "^jnc:(.*)$",
      "segment_values": [[27],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jo$",
      "segment_values": [[28],[]],
      "captures": []
    }, {
      "regex_string": "^jo:(.*)$",
      "segment_values": [[28],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jno$",
      "segment_values": [[29],[]],
      "captures": []
    }, {
      "regex_string": "^jno:(.*)$",
      "segment_values": [[29],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^ji$",
      "segment_values": [[30],[]],
      "captures": []
    }, {
      "regex_string": "^ji:(.*)$",
      "segment_values": [[30],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jni$",
      "segment_values": [[31],[]],
      "captures": []
    }, {
      "regex_string": "^jni:(.*)$",
      "segment_values": [[31],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^cv([0-9A-Fa-f])$",
      "segment_values": [[32],[]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^read([0-3])$",
      "segment_values": [[48],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^get([0-3])$",
      "segment_values": [[52],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i([0-3])$",
      "segment_values": [[56],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^0$",
      "segment_values": [[60],[]],
      "captures": []
    }, {
      "regex_string": "^rot0$",
      "segment_values": [[],[]],
      "captures": []
    }, {
      "regex_string": "^copy0$",
      "segment_values": [[61],[]],
      "captures": []
    }, {
      "regex_string": "^getp$",
      "segment_values": [[62],[]],
      "captures": []
    }, {
      "regex_string": "^geta$",
      "segment_values": [[63],[]],
      "captures": []
    }, {
      "regex_string": "^write([0-3])$",
      "segment_values": [[64],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^setf([0-3])$",
      "segment_values": [[68],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^setb([0-3])$",
      "segment_values": [[72],[]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {}
            ]
          }
        }
      ]
    }, {
      "regex_string": "^\\+$",
      "segment_values": [[76],[]],
      "captures": []
    }, {
      "regex_string": "^\\+c$",
      "segment_values": [[77],[]],
      "captures": []
    }, {
      "regex_string": "^-$",
      "segment_values": [[78],[]],
      "captures": []
    }, {
      "regex_string": "^-c$",
      "segment_values": [[79],[]],
      "captures": []
    }, {
      "regex_string": "^<<$",
      "segment_values": [[80],[]],
      "captures": []
    }, {
      "regex_string": "^>>$",
      "segment_values": [[81],[]],
      "captures": []
    }, {
      "regex_string": "^<<>$",
      "segment_values": [[82],[]],
      "captures": []
    }, {
      "regex_string": "^>><$",
      "segment_values": [[83],[]],
      "captures": []
    }, {
      "regex_string": "^>>>$",
      "segment_values": [[84],[]],
      "captures": []
    }, {
      "regex_string": "^&$",
      "segment_values": [[85],[]],
      "captures": []
    }, {
      "regex_string": "^\\|$",
      "segment_values": [[86],[]],
      "captures": []
    }, {
      "regex_string": "^\\^$",
      "segment_values": [[87],[]],
      "captures": []
    }, {
      "regex_string": "^reada$",
      "segment_values": [[88],[]],
      "captures": []
    }, {
      "regex_string": "^call$",
      "segment_values": [[89],[]],
      "captures": []
    }, {
      "regex_string": "^enter:(.*)$",
      "segment_values": [[89],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 1,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^jump$",
      "segment_values": [[90],[]],
      "captures": []
    }, {
      "regex_string": "^jenter:(.*)$",
      "segment_values": [[90],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 1,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^iset$",
      "segment_values": [[91],[]],
      "captures": []
    }, {
      "regex_string": "^slb$",
      "segment_values": [[92],[]],
      "captures": []
    }, {
      "regex_string": "^usb$",
      "segment_values": [[93],[]],
      "captures": []
    }, {
      "regex_string": "^send$",
      "segment_values": [[94],[]],
      "captures": []
    }, {
      "regex_string": "^loopi$",
      "segment_values": [[95],[]],
      "captures": []
    }, {
      "regex_string": "^loopi:(.*)$",
      "segment_values": [[95],[0]],
      "captures": [
        {
          "Tag": {
            "feedbacks": [
              {
                "from_segment": 0,
                "add_segment": 1,
                "add_index": 0
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i:-0b([0-1]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i:-0x([0-9A-F]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i:-([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i:0b([0-1]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i:0x([0-9A-F]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^i:([0-9]+)$",
      "segment_values": [[],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^-0b([0-1]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^-0x([0-9A-F]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^-([0-9]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "negate": true,
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^0b([0-1]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "Num": {
            "base": 2,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^0x([0-9A-F]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "Num": {
            "base": 16,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }, {
      "regex_string": "^([0-9]+)$",
      "segment_values": [[48],[0]],
      "captures": [
        {
          "Num": {
            "base": 10,
            "feedbacks": [
              {
                "segment": 1
              }
            ]
          }
        }
      ]
    }
  ]
}
